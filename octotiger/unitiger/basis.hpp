/*
 * basis.hpp
 *
 *  Created on: Aug 3, 2019
 *      Author: dmarce1
 */

#ifndef OCTOTIGER_UNITIGER_BASIS_HPP_
#define OCTOTIGER_UNITIGER_BASIS_HPP_


#define SAFE_MATH_ON
#ifdef NOHPX
#include "/home/dmarce1/workspace/octotiger/octotiger/safe_math.hpp"
#else
#include "../../octotiger/safe_math.hpp"
#endif
namespace hydro {


constexpr safe_real vol_weight1d[3] = { 1. / 6., 2. / 3., 1. / 6. };
constexpr safe_real vol_weight2d[9] = { 1. / 36., 1. / 9., 1. / 36., 1. / 9., 4. / 9., 1. / 9., 1. / 36., 1. / 9., 1. / 36. };
constexpr safe_real vol_weight3d[27] = { 1. / 216., 1. / 54., 1. / 216., 1. / 54., 2. / 27., 1. / 54., 1. / 216., 1. / 54., 1. / 216., 1. / 54., 2. / 27., 1.
		/ 54., 2. / 27., 8. / 27., 2. / 27., 1. / 54., 2. / 27., 1. / 54., 1. / 216., 1. / 54., 1. / 216., 1. / 54., 2. / 27., 1. / 54., 1. / 216., 1. / 54., 1.
		/ 216. };

constexpr bool is_face[3][27] = {{1,1},{0,1,0,0,1,0,0,1,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0}};
constexpr bool is_edge[3][27] = {{0,0},{1,0,1,1,0,1,1,0,1},{0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0}};
constexpr bool is_corn[3][27] = {{0,0},{0,0,0,0,0,0,0,0,0},{1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1}};


static constexpr safe_real filter1d[3][3] = { { 0., 1., 0. }, { -0.5, 0., 0.5 }, { 0.5, -1., 0.5 } };

static constexpr safe_real filter2d[9][9] = { { 0., 0., 0., 0., 1., 0., 0., 0., 0. }, { 0., -0.5, 0., 0., 0., 0., 0., 0.5, 0. }, { 0., 0.5, 0., 0., -1., 0., 0., 0.5,
		0. }, { 0., 0., 0., -0.5, 0., 0.5, 0., 0., 0. }, { 0.25, 0., -0.25, 0., 0., 0., -0.25, 0., 0.25 }, { -0.25, 0., 0.25, 0.5, 0., -0.5, -0.25, 0., 0.25 },
		{ 0., 0., 0., 0.5, -1., 0.5, 0., 0., 0. }, { -0.25, 0.5, -0.25, 0., 0., 0., 0.25, -0.5, 0.25 }, { 0.25, -0.5, 0.25, -0.5, 1., -0.5, 0.25, -0.5, 0.25 } };

static constexpr safe_real filter3d[27][27] = { { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0. }, { 0.,
		0., 0., 0., -0.5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0., 0., 0., 0. }, { 0., 0., 0., 0., 0.5, 0., 0., 0., 0., 0.,
		0., 0., 0., -1., 0., 0., 0., 0., 0., 0., 0., 0., 0.5, 0., 0., 0., 0. }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.5, 0., 0., 0., 0., 0., 0.5, 0., 0.,
		0., 0., 0., 0., 0., 0., 0., 0. },
		{ 0., 0.25, 0., 0., 0., 0., 0., -0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.25, 0., 0., 0., 0., 0., 0.25, 0. }, { 0., -0.25, 0., 0., 0., 0.,
				0., 0.25, 0., 0., 0.5, 0., 0., 0., 0., 0., -0.5, 0., 0., -0.25, 0., 0., 0., 0., 0., 0.25, 0. }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.5,
				0., 0., -1., 0., 0., 0.5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0. }, { 0., -0.25, 0., 0., 0.5, 0., 0., -0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
				0., 0., 0.25, 0., 0., -0.5, 0., 0., 0.25, 0. }, { 0., 0.25, 0., 0., -0.5, 0., 0., 0.25, 0., 0., -0.5, 0., 0., 1., 0., 0., -0.5, 0., 0., 0.25,
				0., 0., -0.5, 0., 0., 0.25, 0. }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.5, 0., 0.5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
				0. }, { 0., 0., 0., 0.25, 0., -0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.25, 0., 0.25, 0., 0., 0. }, { 0., 0., 0.,
				-0.25, 0., 0.25, 0., 0., 0., 0., 0., 0., 0.5, 0., -0.5, 0., 0., 0., 0., 0., 0., -0.25, 0., 0.25, 0., 0., 0. }, { 0., 0., 0., 0., 0., 0., 0., 0.,
				0., 0.25, 0., -0.25, 0., 0., 0., -0.25, 0., 0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0. }, { -0.125, 0., 0.125, 0., 0., 0., 0.125, 0., -0.125, 0.,
				0., 0., 0., 0., 0., 0., 0., 0., 0.125, 0., -0.125, 0., 0., 0., -0.125, 0., 0.125 }, { 0.125, 0., -0.125, 0., 0., 0., -0.125, 0., 0.125, -0.25,
				0., 0.25, 0., 0., 0., 0.25, 0., -0.25, 0.125, 0., -0.125, 0., 0., 0., -0.125, 0., 0.125 }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.25, 0.,
				0.25, 0.5, 0., -0.5, -0.25, 0., 0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0. }, { 0.125, 0., -0.125, -0.25, 0., 0.25, 0.125, 0., -0.125, 0., 0., 0.,
				0., 0., 0., 0., 0., 0., -0.125, 0., 0.125, 0.25, 0., -0.25, -0.125, 0., 0.125 }, { -0.125, 0., 0.125, 0.25, 0., -0.25, -0.125, 0., 0.125, 0.25,
				0., -0.25, -0.5, 0., 0.5, 0.25, 0., -0.25, -0.125, 0., 0.125, 0.25, 0., -0.25, -0.125, 0., 0.125 }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
				0., 0., 0.5, -1., 0.5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0. }, { 0., 0., 0., -0.25, 0.5, -0.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.,
				0., 0., 0., 0., 0., 0., 0.25, -0.5, 0.25, 0., 0., 0. }, { 0., 0., 0., 0.25, -0.5, 0.25, 0., 0., 0., 0., 0., 0., -0.5, 1., -0.5, 0., 0., 0., 0.,
				0., 0., 0.25, -0.5, 0.25, 0., 0., 0. }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.25, 0.5, -0.25, 0., 0., 0., 0.25, -0.5, 0.25, 0., 0., 0., 0.,
				0., 0., 0., 0., 0. }, { 0.125, -0.25, 0.125, 0., 0., 0., -0.125, 0.25, -0.125, 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.125, 0.25, -0.125, 0., 0.,
				0., 0.125, -0.25, 0.125 }, { -0.125, 0.25, -0.125, 0., 0., 0., 0.125, -0.25, 0.125, 0.25, -0.5, 0.25, 0., 0., 0., -0.25, 0.5, -0.25, -0.125,
				0.25, -0.125, 0., 0., 0., 0.125, -0.25, 0.125 }, { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.25, -0.5, 0.25, -0.5, 1., -0.5, 0.25, -0.5, 0.25, 0.,
				0., 0., 0., 0., 0., 0., 0., 0. }, { -0.125, 0.25, -0.125, 0.25, -0.5, 0.25, -0.125, 0.25, -0.125, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.125,
				-0.25, 0.125, -0.25, 0.5, -0.25, 0.125, -0.25, 0.125 }, { 0.125, -0.25, 0.125, -0.25, 0.5, -0.25, 0.125, -0.25, 0.125, -0.25, 0.5, -0.25, 0.5,
				-1., 0.5, -0.25, 0.5, -0.25, 0.125, -0.25, 0.125, -0.25, 0.5, -0.25, 0.125, -0.25, 0.125 } };

static constexpr int inv_filter1d[3][3] = { { 1, -1, 1 }, { 1, 0, 0 }, { 1, 1, 1 } };

static constexpr int inv_filter2d[9][9] = { { 1, -1, 1, -1, 1, -1, 1, -1, 1 }, { 1, -1, 1, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, 1, -1, 1, 1, -1, 1 }, { 1, 0, 0, -1, 0, 0,
		1, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 1, 0, 0, 1, 0, 0 }, { 1, 1, 1, -1, -1, -1, 1, 1, 1 }, { 1, 1, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 1,
		1, 1, 1, 1, 1 } };

static constexpr int inv_filter3d[27][27] = { { 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1 }, { 1, -1, 1, -1, 1, -1,
		1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1,
		1, -1, 1 }, { 1, -1, 1, 0, 0, 0, 0, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, 1, -1, 1, 1, -1,
		1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1 },
		{ 1, -1, 1, 1, -1, 1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1,
				-1, 1, 1, -1, 1, 1, -1, 1 }, { 1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0 }, { 1, 0, 0, -1, 0, 0, 1, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
				0, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
				0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0 }, { 1,
				0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
				1, 0, 0, 1, 0, 0 }, { 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1 }, { 1, 1, 1, -1, -1, -1, 1,
				1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1,
				1, 1, 1 }, { 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 1, 1,
				1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };


static inline constexpr int pow(int a, int b) {
	if (b == 0) {
		return 1;
	} else {
		return a * pow(a, b - 1);
	}
}


template<int NDIM>
std::array<safe_real, pow(3, NDIM)> to_basis(const std::array<safe_real, pow(3, NDIM)> &p) {
	constexpr int ndir = std::pow(3, NDIM);
	std::array<safe_real, ndir> q;
	for (int n = 0; n < ndir; n++) {
		q[n] = 0.0;
		for (int m = 0; m < ndir; m++) {
			if constexpr (NDIM == 1) {
				q[n] += filter1d[n][m] * p[m];
			} else if constexpr (NDIM == 2) {
				q[n] += filter2d[n][m] * p[m];
			} else {
				q[n] += filter3d[n][m] * p[m];
			}
		}
	}
	return q;
}

template<int NDIM>
std::array<safe_real, pow(3, NDIM)> from_basis(const std::array<safe_real, pow(3, NDIM)> &q) {
	constexpr int ndir = std::pow(3, NDIM);
	std::array<safe_real, ndir> p;
	for (int n = 0; n < ndir; n++) {
		p[n] = 0.0;
		for (int m = 0; m < ndir; m++) {
			if constexpr (NDIM == 1) {
				p[n] += filter1d[n][m] * q[m];
			} else if constexpr (NDIM == 2) {
				p[n] += filter2d[n][m] * q[m];
			} else {
				p[n] += filter3d[n][m] * q[m];
			}
		}
	}
	return p;
}




static inline void attenuate(safe_real &a, safe_real b) {
	a = std::copysign(std::min(std::abs(a), 0.5 * std::abs(b)), a);
}
}

#endif /* OCTOTIGER_UNITIGER_BASIS_HPP_ */
