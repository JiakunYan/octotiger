#!groovy

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/STEllAR-GROUP/octotiger"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent any

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
    }
    stages {
        stage('checkout') {
            steps {
                dir('octotiger') {
                    checkout scm
                    echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
                }
            }
        }
        stage('build') {
            matrix {
                axes {
                    axis {
                        name 'compiler_config'
                        values 'with-CC', 'with-CC-clang'
                    }
                    axis {
                        name 'cuda_config'
                        values 'with-cuda', 'without-cuda'
                    }
                    axis {
                        name 'kokkos_config'
                        values 'with-kokkos', 'without-kokkos'
                    }
                    axis {
                         name 'build_type'
                         values 'Release'
                    }
                }
                stages {
                    stage('checkout_buildscripts') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                #!/bin/bash -l
                                cd ..
                                #rm -rf octo-buildscripts/src/octotiger
                                #rm -rf "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}" #remove line for dependency caching
                                if [[ -d "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}" ]]
                                then
                                    cd "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    git reset --hard # reset griddim modification in case of unclean directory
                                    git pull
                                    rm -rf build/octotiger
                                    rm -rf src/octotiger
                                else
                                    git clone https://github.com/diehlpk/PowerTiger.git "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    cd "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    git checkout clang_build
                                    mkdir src
                                fi

                                cd ..
                                pwd
                                cp -r octotiger "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}/src/octotiger"
                                '''
                            }
                        }
                    }
                    stage('build') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                #!/bin/bash -l
                                cd "../octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                src/octotiger/.jenkins/lsu/entry.sh
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('report') {
            steps {
                dir('octotiger') {
                    sh '''
                    export REPO_NAME='STEllAR-GROUP/octotiger'
                    export JOB_NAME='Octo-Tiger'
                    curl "//api.GitHub.com/repos/$REPO_NAME/statuses/$GIT_COMMIT
                            ?access_token=$GITHUB_TOKEN_OCTOTIGER" \
                        -H "Content-Type: application/json" \
                        -X POST \
                        -d "{
                            \"state\": \"success\",
                            \"context\": \"jenkins/$REPO_NAME\",
                            \"description\": \"Jenkins\",
                            \"target_url\": \"//YOUR_JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/console\"
                        }"

                    '''
                }
            }
        }
    }
    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
}
