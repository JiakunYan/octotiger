#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "nodelevel", subject: "CPU / GPU Tests", status: "running")

// Skip builds that are likely to be tested already (by push) and unlikely to be critical (not on master)
if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") { // Always run on master
        if (env.BUILD_NUMBER != 1) { // Always run first build on a new branch pipeline to load the options (and thus github hook triggers) for the pipeline
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            currentBuild.result = 'ABORTED' 
            buildbadge.setStatus('skipped')
            return // Early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
} 


pipeline {
    agent any

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
        disableConcurrentBuilds()
    }
    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/30 * * * *' // Fallback polling solution as some pushes are somehow lost
    }
    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_OCTOTIGER')
        MAINTAINER_MAIL = credentials('OCTOTIGER_MAINTAINER_EMAIL')
    }
    stages {
        stage('checkout') {
            steps {
                script {
                    buildbadge.setStatus('running')
                }
                dir('octotiger') {
                    checkout scm
                    sh '''
                        echo "Build started on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} just started..." "${MAINTAINER_MAIL}"
                    '''
                }
            }
        }
        stage('build') {
            matrix {
                axes {
                    axis {
                        name 'compiler_config'
                        values 'with-CC', 'with-CC-clang'
                    }
                    axis {
                        name 'cuda_config'
                        values 'with-cuda', 'without-cuda'
                    }
                    axis {
                        name 'kokkos_config'
                        values 'with-kokkos', 'without-kokkos'
                    }
                    axis {
                         name 'build_type'
                         values 'Release'
                    }
                }
                stages {
                    stage('init') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                                curl --verbose\
                                    --request POST \
                                    --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                                    --header "Content-Type: application/json" \
                                    --header "authorization: Bearer ${github_token}" \
                                    --data "{
                                        \\"state\\": \\"pending\\",
                                        \\"context\\": \\"jenkins-${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                        \\"description\\": \\"Jenkins CI Job: ${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                        \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                                    }"
                                '''
                            }
                        }
                    }
                    stage('checkout_buildscripts') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                #!/bin/bash -l
                                cd ..
                                #rm -rf octo-buildscripts/src/octotiger
                                #rm -rf "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}" #remove line for dependency caching
                                if [[ -d "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}" ]]
                                then
                                    cd "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    git reset --hard # reset griddim modification in case of unclean directory
                                    git pull
                                    rm -rf build/octotiger
                                    rm -rf src/octotiger
                                else
                                    git clone https://github.com/diehlpk/PowerTiger.git "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    cd "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                    git checkout clang_build
                                    mkdir src
                                fi

                                cd ..
                                cd octotiger
                                git submodule update --init --recursive
                                cd ..
                                cp -r octotiger "octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}/src/octotiger"
                                '''
                            }
                        }
                    }
                    stage('build') {
                        steps {
                            dir('octotiger') {
                                sh '''
                                #!/bin/bash -l
                                cd "../octo-buildscripts-${compiler_config}-${cuda_config}-${kokkos_config}"
                                src/octotiger/.jenkins/lsu/entry.sh
                                '''
                            }
                        }
                    }
                }
                post {
                    success {
                        sh '''
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"success\\",
                                \\"context\\": \\"jenkins-${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"description\\": \\"Jenkins CI Job: ${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                    failure {
                        sh '''
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"failure\\",
                                \\"context\\": \\"jenkins-${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"description\\": \\"Jenkins CI Job: ${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                    aborted {
                        sh '''
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                                \\"state\\": \\"error\\",
                                \\"context\\": \\"jenkins-${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"description\\": \\"Jenkins CI Job: ${compiler_config}-${cuda_config}-${kokkos_config}\\",
                                \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                            }"
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
                echo "Build succeded! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} succeded" "${MAINTAINER_MAIL}"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
                echo "Build failed! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} failed" "${MAINTAINER_MAIL}"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
                echo "Build aborted on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger Node-Level Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} aborted" "${MAINTAINER_MAIL}"
            '''
        }
    }
}
