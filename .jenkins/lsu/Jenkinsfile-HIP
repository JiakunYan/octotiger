#!groovy

def buildbadge = addEmbeddableBadgeConfiguration(id: "HIP", subject: "KOKKOS HIP Kernel Tests", status: "skipped")

// Skip builds that are likely to be tested already (by push) and unlikely to be critical (not on master)
if (currentBuild.getBuildCauses().toString().contains('BranchIndexingCause')) {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by branch indexing..."
    if (env.BRANCH_NAME != "master") { // Always run on master
        if (env.BUILD_NUMBER != "1") { // Always run first build on a new branch pipeline to load the options (and thus github hook triggers) for the pipeline
            print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} skipped due being triggered by Branch Indexing instead of SCM change!"
            currentBuild.result = 'ABORTED' 
            buildbadge.setStatus('skipped')
            return // Early exit to avoid redundant builds
        }
    }
} else {
    print "INFO: Build on ${env.BRANCH_NAME}/${env.BUILD_NUMBER} triggered by SCM change..."
    print "Proceeding!"
} 


pipeline {
    agent any

    options {
        buildDiscarder(
            logRotator(
                daysToKeepStr: "21",
                numToKeepStr: "50",
                artifactDaysToKeepStr: "21",
                artifactNumToKeepStr: "50"
            )
        )
        disableConcurrentBuilds()
    }
    triggers {
        githubPush() // Trigger by push to respective github branch
        pollSCM 'H/5 * * * *' // Fallback polling solution as some pushes are somehow lost
    }
    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN_OCTOTIGER')
        MAINTAINER_MAIL = credentials('OCTOTIGER_MAINTAINER_EMAIL')
    }
    stages {
        stage('checkout') {
            steps {
                scmSkip(deleteBuild: false, skipPattern:'.*\\[ci skip\\].*')
                script {
                    buildbadge.setStatus('running')
                }
                dir('octotiger') {
                    checkout scm
                    sh '''
                        cd octotiger
                        git submodule update --init --recursive
                        cd ..
                        echo "Build started on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} just started..." "${MAINTAINER_MAIL}"
                    '''
                }
                dir('octotiger') {
                    sh '''
                        github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
                        curl --verbose\
                            --request POST \
                            --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                            --header "Content-Type: application/json" \
                            --header "authorization: Bearer ${github_token}" \
                            --data "{
                          \\"state\\": \\"pending\\",
                          \\"context\\": \\"jenkins-HIP\\",
                          \\"description\\": \\"Jenkins CI Job: HIP\\",
                          \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                            }"
                    '''
                }
            }
        }
        stage('configure') {
            steps {
                dir('octotiger') {
                    sh '''
                        #!/bin/bash -l
                        cd ..
                        #rm -rf octo-buildscripts/src/octotiger
                        rm -rf "octo-buildscripts-HIP" #remove line for dependency caching
                        if [[ -d "octo-buildscripts-HIP" ]]
                        then
                            cd "octo-buildscripts-HIP"
                            git reset --hard # reset griddim modification in case of unclean directory
                            git checkout jenkins-kamand
                            git pull
                            rm -rf build/octotiger
                            rm -rf src/octotiger
                        else
                            git clone https://github.com/diehlpk/PowerTiger.git "octo-buildscripts-HIP"
                            cd "octo-buildscripts-HIP"
                            git checkout jenkins-kamand
                            mkdir src
                        fi

                        cd ..
                        cp -r octotiger "octo-buildscripts-HIP/src/octotiger"
                    '''
                }
            }
        }
        stage('build-and-test') {
            steps {
                dir('octotiger') {
                    sh '''
                    #!/bin/bash -l
                    cd "../octo-buildscripts-HIP"
                    src/octotiger/.jenkins/lsu/hip-tests-entry.sh
                    '''
                }
            }
        }
    }
    post {
        success {
            script {
                buildbadge.setStatus('success')
            }
            sh '''
            echo "Build succeded! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} succeded" "${MAINTAINER_MAIL}"
            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
            curl --verbose\
                --request POST \
                --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                --header "Content-Type: application/json" \
                --header "authorization: Bearer ${github_token}" \
                --data "{
                    \\"state\\": \\"success\\",
                    \\"context\\": \\"jenkins-HIP\\",
                    \\"description\\": \\"Jenkins CI Job: HIP\\",
                    \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                }"
            '''
        }
        failure {
            script {
                buildbadge.setStatus('failing')
            }
            sh '''
            echo "Build failed! Pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} failed" "${MAINTAINER_MAIL}"
            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
            curl --verbose\
                --request POST \
                --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                --header "Content-Type: application/json" \
                --header "authorization: Bearer ${github_token}" \
                --data "{
                    \\"state\\": \\"failure\\",
                    \\"context\\": \\"jenkins-HIP\\",
                    \\"description\\": \\"Jenkins CI Job: HIP\\",
                    \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                }"
            '''
        }
        aborted {
            script {
                buildbadge.setStatus('aborted')
            }
            sh '''
            echo "Build aborted on pipeline ${JOB_BASE_NAME} with build ID ${BUILD_NUMBER} using GIT commit ${GIT_COMMIT}" | mail -s "Jenkins Octo-Tiger HIP Tests: Build ${JOB_BASE_NAME}/${BUILD_NUMBER} aborted" "${MAINTAINER_MAIL}"
            github_token=$(echo ${GITHUB_TOKEN} | cut -f2 -d':')
            curl --verbose\
                --request POST \
                --url "https://api.github.com/repos/STEllAR-GROUP/octotiger/statuses/$GIT_COMMIT" \
                --header "Content-Type: application/json" \
                --header "authorization: Bearer ${github_token}" \
                --data "{
                    \\"state\\": \\"error\\",
                    \\"context\\": \\"jenkins-HIP\\",
                    \\"description\\": \\"Jenkins CI Job: HIP\\",
                    \\"target_url\\": \\"https://rostam.cct.lsu.edu/jenkins/job/Octo-Tiger/$BUILD_NUMBER/console\\"
                }"
            '''
        }
    }
}
